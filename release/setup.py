#!/usr/bin/env python

from __future__ import print_function
import argparse
import os
import platform
import sys
import tarfile
import urllib
import hashlib

def reporthook(a,b,c):
        # ',' at the end of the line is important!
        print ("% {:03.1f} of %d bytes\r".format (min(100, float(a * b) / c * 100), c), end="")
        sys.stdout.flush()

def md5(fname):
    hash_md5 = hashlib.md5()
    with open(fname, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()
                                        
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

REMOTE_URL = "http://www.cs.cornell.edu/courses/cs3410/2019sp/resources/riscv_musl.tar.gz"
SERVER_RISCV = "/usr/local/riscv"
CHECKSUM = "c265b7c474b6350899eae9fece8f729f" #musl

HOME = os.path.expanduser("~")

DEFAULT_LOCAL_RISCV = os.path.join(HOME, "musl")

BASHRC_FILE = os.path.join(HOME, ".bashrc")
BASHRC_HEADER = "#~~~~~~~~BEGIN AUTOGENERATED LINES FROM CS3410 SETUP SCRIPT~~~~~~~~~~"
BASHRC_FOOTER = "#~~~~~~~~END AUTOGENERATED LINES FROM CS3410 SETUP SCRIPT~~~~~~~~~~~~"

riscv_dir = ""

def check_os():
    if platform.system() != "Linux":
        print("It appears you are not in the course computing environment (ugclinux servers or course VM).  Please rerun this command on one of those.")
        exit(1)

def setup_toolchain():
    local_found = False    
    global riscv_dir
    print("New RISC-V toolchain not yet on servers, skipping server check")
    if os.path.exists(SERVER_RISCV) and False:
        riscv_dir = SERVER_RISCV
        print("RISC-V toolchain detected at {}, skipping PATH modification".format(SERVER_RISCV))
        return False
    else:
        riscv_env =  os.environ.get("RISCV")
        if riscv_env and os.path.exists(riscv_env) and "musl" in riscv_env:
            print("RISC-V musl toolchain detected at {}".format(riscv_env))
            riscv_dir = riscv_env
            return True
        p = raw_input("""No RISC-V musl toolchain found.  \nPlease specify a location to extract the toolchain to (leave blank for default path "{}"):""".format(DEFAULT_LOCAL_RISCV))
        if p:
            riscv_dir = p
        else:
            riscv_dir = DEFAULT_LOCAL_RISCV    
        riscv_base_dir = riscv_dir
        riscv_dir = os.path.join(riscv_dir, "opt", "riscv", "musl-riscv-toolchain-8.2.0-1")
        local_file = os.path.join(HOME, "riscv_musl.tar.gz")
        if os.path.exists(local_file):
            checksum = md5(local_file)
            if(checksum == CHECKSUM):

                print("Zipped toolchain already found at {}, using local copy".format(local_file))
                local_found = True
            else:
                print(checksum)
                print("Checksum of local file does not match, redownloading")

        if not local_found:

            print("Downloading RISC-V toolchain from {} to temporary file {}".format(REMOTE_URL, local_file))
            urllib.urlretrieve(REMOTE_URL, local_file, reporthook)
        print("Extracting toolchain...")
        tar = tarfile.open(local_file, "r:gz")
        tar.extractall(path=riscv_base_dir)
        tar.close()
        print("Toolchain extracted...")
    return True
def save_bashrc(modify_path):

    f= open(BASHRC_FILE, "r+")
    contents = f.read()
    with open(os.path.join(HOME, ".bashrc_backup"), "a") as f2:
        f2.write(contents)

    if BASHRC_HEADER in contents:
        print("Your .bashrc has already been modified by this script, overwriting")
        contents = contents[:contents.find("\n" + BASHRC_HEADER + "\n")] + contents[contents.rfind(BASHRC_FOOTER)+ len(BASHRC_FOOTER):]
        contents += "\n" + BASHRC_HEADER + "\n"
    else:
        contents += "\n" + BASHRC_HEADER + "\n"

    if modify_path:
        contents += "export PATH={}:$PATH\n".format(os.path.join(riscv_dir, "bin"))
    contents += "export RISCV={}\n".format(riscv_dir)
    contents += "alias riscv32-addr2line=\"riscv32-linux-musl-addr2line\"\n"
    contents += "alias riscv32-ar=\"riscv32-linux-musl-ar\"\n"
    contents += "alias riscv32-as=\"riscv32-linux-musl-as\"\n"
    contents += "alias riscv32-c++=\"riscv32-linux-musl-c++\"\n"
    contents += "alias riscv32-c++filt=\"riscv32-linux-musl-c++filt\"\n"
    contents += "alias riscv32-cpp=\"riscv32-linux-musl-cpp\"\n"
    contents += "alias riscv32-elfedit=\"riscv32-linux-musl-elfedit\"\n"
    contents += "alias riscv32-g++=\"riscv32-linux-musl-g++\"\n"
    contents += "alias riscv32-gcc=\"riscv32-linux-musl-gcc\"\n"
    contents += "alias riscv32-gcc-8.2.0=\"riscv32-linux-musl-gcc-8.2.0\"\n"
    contents += "alias riscv32-gcc-ar=\"riscv32-linux-musl-gcc-ar\"\n"
    contents += "alias riscv32-gcc-nm=\"riscv32-linux-musl-gcc-nm\"\n"
    contents += "alias riscv32-gcc-ranlib=\"riscv32-linux-musl-gcc-ranlib\"\n"
    contents += "alias riscv32-gcov=\"riscv32-linux-musl-gcov\"\n"
    contents += "alias riscv32-gcov-dump=\"riscv32-linux-musl-gcov-dump\"\n"
    contents += "alias riscv32-gcov-tool=\"riscv32-linux-musl-gcov-tool\"\n"
    contents += "alias riscv32-gprof=\"riscv32-linux-musl-gprof\"\n"
    contents += "alias riscv32-ld=\"riscv32-linux-musl-ld\"\n"
    contents += "alias riscv32-ld.bfd=\"riscv32-linux-musl-ld.bfd\"\n"
    contents += "alias riscv32-nm=\"riscv32-linux-musl-nm\"\n"
    contents += "alias riscv32-objcopy=\"riscv32-linux-musl-objcopy\"\n"
    contents += "alias riscv32-objdump=\"riscv32-linux-musl-objdump\"\n"
    contents += "alias riscv32-ranlib=\"riscv32-linux-musl-ranlib\"\n"
    contents += "alias riscv32-readelf=\"riscv32-linux-musl-readelf\"\n"
    contents += "alias riscv32-run=\"riscv32-linux-musl-run\"\n"
    contents += "alias riscv32-size=\"riscv32-linux-musl-size\"\n"
    contents += "alias riscv32-strings=\"riscv32-linux-musl-strings\"\n"
    contents += "alias riscv32-strip=\"riscv32-linux-musl-strip\"\n"
    contents += "alias riscv32-gdb=\"riscv32-elf-gdb\"\n"

    contents += BASHRC_FOOTER + "\n"
    f.seek(0)
    f.write(contents)
    f.truncate()
    print(bcolors.WARNING + bcolors.BOLD +  """.bashrc has been updated, please either run "source ~/.bashrc" or restart your terminal window now to activate changes""" + bcolors.ENDC)
    f.close()
if __name__ == "__main__":
    check_os()
    r = setup_toolchain()
    save_bashrc(r)

